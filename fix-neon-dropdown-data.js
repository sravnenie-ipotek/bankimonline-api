const { Pool } = require('pg');
const fs = require('fs');

// Connect to NEON database
const neonPool = new Pool({
    connectionString: process.env.NEON_CONTENT_URL || 'postgresql://neondb_owner:npg_jbzp4wqldAu7@ep-wild-feather-ad1lx42k.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require',
    ssl: {
        rejectUnauthorized: false
    }
});

async function fixNeonDropdownData() {
    console.log('üîß FIXING NEON DATABASE DROPDOWN DATA - Bug #4\n');
    console.log('üìù Issue: NEON database has empty dropdown_data for many dropdowns');
    console.log('üõ†Ô∏è Solution: Update dropdown_data with proper options\n');
    
    try {
        // Fix education dropdown specifically
        const educationData = {
            label: {
                he: "◊î◊©◊õ◊ú◊î",
                en: "Education",
                ru: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            },
            placeholder: {
                he: "◊ë◊ó◊® ◊®◊û◊™ ◊î◊©◊õ◊ú◊î",
                en: "Select education level",
                ru: "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
            },
            options: [
                {
                    value: "high_school",
                    text: {
                        he: "◊™◊ô◊õ◊ï◊ü",
                        en: "High School",
                        ru: "–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞"
                    }
                },
                {
                    value: "bachelor",
                    text: {
                        he: "◊™◊ï◊ê◊® ◊®◊ê◊©◊ï◊ü",
                        en: "Bachelor's Degree",
                        ru: "–ë–∞–∫–∞–ª–∞–≤—Ä"
                    }
                },
                {
                    value: "master",
                    text: {
                        he: "◊™◊ï◊ê◊® ◊©◊†◊ô",
                        en: "Master's Degree",
                        ru: "–ú–∞–≥–∏—Å—Ç—Ä"
                    }
                },
                {
                    value: "phd",
                    text: {
                        he: "◊ì◊ï◊ß◊ò◊ï◊®◊ò",
                        en: "PhD",
                        ru: "–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫"
                    }
                },
                {
                    value: "other",
                    text: {
                        he: "◊ê◊ó◊®",
                        en: "Other",
                        ru: "–î—Ä—É–≥–æ–µ"
                    }
                }
            ]
        };
        
        await neonPool.query(`
            UPDATE dropdown_configs
            SET dropdown_data = $1
            WHERE field_name = 'education' AND screen_location LIKE 'mortgage%'
        `, [JSON.stringify(educationData)]);
        
        console.log('‚úÖ Updated education dropdown');
        
        // Fix other common dropdowns with empty data
        const commonDropdowns = {
            marital_status: {
                label: {
                    he: "◊û◊¶◊ë ◊û◊©◊§◊ó◊™◊ô",
                    en: "Marital Status",
                    ru: "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                },
                placeholder: {
                    he: "◊ë◊ó◊® ◊û◊¶◊ë ◊û◊©◊§◊ó◊™◊ô",
                    en: "Select marital status",
                    ru: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                },
                options: [
                    { value: "single", text: { he: "◊®◊ï◊ï◊ß/◊î", en: "Single", ru: "–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º" } },
                    { value: "married", text: { he: "◊†◊©◊ï◊ô/◊†◊©◊ï◊ê◊î", en: "Married", ru: "–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º" } },
                    { value: "divorced", text: { he: "◊í◊®◊ï◊©/◊î", en: "Divorced", ru: "–í —Ä–∞–∑–≤–æ–¥–µ" } },
                    { value: "widowed", text: { he: "◊ê◊ú◊û◊ü/◊ê◊ú◊û◊†◊î", en: "Widowed", ru: "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞" } }
                ]
            },
            employment_type: {
                label: {
                    he: "◊°◊ï◊í ◊î◊¢◊°◊ß◊î",
                    en: "Employment Type",
                    ru: "–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"
                },
                placeholder: {
                    he: "◊ë◊ó◊® ◊°◊ï◊í ◊î◊¢◊°◊ß◊î",
                    en: "Select employment type",
                    ru: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"
                },
                options: [
                    { value: "employee", text: { he: "◊©◊õ◊ô◊®", en: "Employee", ru: "–ù–∞–µ–º–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫" } },
                    { value: "self_employed", text: { he: "◊¢◊¶◊û◊ê◊ô", en: "Self-Employed", ru: "–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π" } },
                    { value: "business_owner", text: { he: "◊ë◊¢◊ú ◊¢◊°◊ß", en: "Business Owner", ru: "–í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞" } },
                    { value: "unemployed", text: { he: "◊ú◊ê ◊¢◊ï◊ë◊ì", en: "Unemployed", ru: "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π" } }
                ]
            },
            citizenship: {
                label: {
                    he: "◊ê◊ñ◊®◊ó◊ï◊™",
                    en: "Citizenship",
                    ru: "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"
                },
                placeholder: {
                    he: "◊ë◊ó◊® ◊ê◊ñ◊®◊ó◊ï◊™",
                    en: "Select citizenship",
                    ru: "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ"
                },
                options: [
                    { value: "israeli", text: { he: "◊ô◊©◊®◊ê◊ú◊ô", en: "Israeli", ru: "–ò–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ" } },
                    { value: "dual", text: { he: "◊õ◊§◊ï◊ú◊î", en: "Dual", ru: "–î–≤–æ–π–Ω–æ–µ" } },
                    { value: "foreign", text: { he: "◊ñ◊®", en: "Foreign", ru: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ" } },
                    { value: "permanent_resident", text: { he: "◊™◊ï◊©◊ë ◊ß◊ë◊¢", en: "Permanent Resident", ru: "–ü–ú–ñ" } }
                ]
            },
            residency_status: {
                label: {
                    he: "◊°◊ò◊ò◊ï◊° ◊™◊ï◊©◊ë◊ï◊™",
                    en: "Residency Status",
                    ru: "–°—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
                },
                placeholder: {
                    he: "◊ë◊ó◊® ◊°◊ò◊ò◊ï◊° ◊™◊ï◊©◊ë◊ï◊™",
                    en: "Select residency status",
                    ru: "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
                },
                options: [
                    { value: "resident", text: { he: "◊™◊ï◊©◊ë", en: "Resident", ru: "–†–µ–∑–∏–¥–µ–Ω—Ç" } },
                    { value: "non_resident", text: { he: "◊™◊ï◊©◊ë ◊ó◊ï◊•", en: "Non-Resident", ru: "–ù–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç" } },
                    { value: "returning_resident", text: { he: "◊™◊ï◊©◊ë ◊ó◊ï◊ñ◊®", en: "Returning Resident", ru: "–í–µ—Ä–Ω—É–≤—à–∏–π—Å—è —Ä–µ–∑–∏–¥–µ–Ω—Ç" } }
                ]
            }
        };
        
        // Update each dropdown
        for (const [fieldName, data] of Object.entries(commonDropdowns)) {
            await neonPool.query(`
                UPDATE dropdown_configs
                SET dropdown_data = $1
                WHERE field_name = $2 AND dropdown_data IS NULL OR dropdown_data::text = '[]' OR dropdown_data::text = '{}'
            `, [JSON.stringify(data), fieldName]);
            
            console.log(`‚úÖ Updated ${fieldName} dropdown`);
        }
        
        // Check if we have dropdowns without any data
        const emptyResult = await neonPool.query(`
            SELECT COUNT(*) as count
            FROM dropdown_configs
            WHERE screen_location LIKE 'mortgage%'
                AND (dropdown_data IS NULL OR dropdown_data::text = '[]' OR dropdown_data::text = '{}')
        `);
        
        console.log(`\nüìä Remaining empty dropdowns in mortgage screens: ${emptyResult.rows[0].count}`);
        
        // Update bug tracker
        const trackerPath = '/Users/michaelmishayev/Projects/bankDev2_standalone/mainapp/bug-fix-tracker.json';
        const tracker = JSON.parse(fs.readFileSync(trackerPath, 'utf8'));
        
        const currentIteration = tracker.iterations.find(it => it.iteration_number === 2);
        if (currentIteration) {
            currentIteration.bugs_fixed.push('NEON database has empty dropdown_data');
            currentIteration.fix_applied += ' | Fixed NEON database dropdown data';
        } else {
            tracker.iterations.push({
                iteration_number: 3,
                timestamp: new Date().toISOString(),
                bugs_fixed: ['NEON database has empty dropdown_data'],
                fix_applied: 'Updated NEON database with proper dropdown options',
                duration_seconds: Math.floor((Date.now() - new Date(tracker.start_time).getTime()) / 1000)
            });
        }
        tracker.total_iterations = 3;
        tracker.total_bugs_fixed = 4;
        
        fs.writeFileSync(trackerPath, JSON.stringify(tracker, null, 2));
        
        console.log('\n‚úÖ BUG FIX #4 COMPLETE: NEON database dropdown data fixed');
        console.log('üîÑ Ready for test iteration #3...');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await neonPool.end();
    }
}

fixNeonDropdownData();